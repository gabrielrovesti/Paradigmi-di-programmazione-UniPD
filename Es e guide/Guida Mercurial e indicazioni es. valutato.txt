----Utile----

Installato Mercurial, versione 6.0
per poter leggere le slide del prof basta fare:
hg clone https://hg.sr.ht/~michelemauro/pdp2021-pub 

Per la consegna dell'esercizio si richiede di:
- modificare come indicato sotto la propria configurazione utente (hg config -e)
- creazione del proprio branch di lavoro nel formato usandio "hg summary"
 (per controllare lo stato) poi si crea il branch con hg branch (matricola)M
- installare Gradle (https://gradle.org/install/)
- creazione del file version.txt che include come dati le versioni di Gradle e Mercurial utilizzate
- fare il commit del file con: hg commit -m version.txt
- creazione del bundle con: hg bundle -b matricola matricola.hg
- condivisione su Google Drive del file stesso 

----Guida prof----
Guida all'uso di Mercurial
Mercurial è un Source Change Management distribuito, semplice da usare e basato su di un modello chiaro e rigoroso. Ogni unità di modifica ("commit") è immutabile, ed ha fra i suoi metadati il branch di appartenenza: questo porta ad uno stato complessivo del repository più facile da comprendere e maneggiare, e rende estremamente difficile perdere informazioni: le poche operazioni distruttive creano sempre dei backup e lo stato del repository non può mai diventare "non definito" o corrompersi in modo irreparabile.

Una specifica feature detta "bundling" permette infine di raggruppare un insieme di cambiamenti in un pacchetto binario compatto e facile da condividere, abilitando quindi la collaborazione anche in assenza di un deposito centralizzato delle modifiche. I "bundle" sono esclusivamente addittivi, quindi possono essere in sicurezza applicati ad una altra copia dello stesso repository senza che questo possa causare alcuna perdita di informazioni locali; anche situazioni di conflitto possono essere gestite anche per tentativi successivi, cancellando ad ogni tentativo le modifiche fatte per ritornare agevolmente allo stato precedente.

Per motivi di mercato non è semplice trovare un servizio di hosting che supporti questo SCM: il servizio storico bitbucket.org dopo l'acquisizione da parte della multinazionale Atlassian ha di recente terminato il supporto a repository Mercurial. Il repository del corso è gestito dal servizio sourcehut.org, che per un canone annuale molto sostenibile fornisce un servizio orgogliosamente indipendente.


Installazione e configurazione

Mercurial è supportato dai maggiori package manager, come per esempio chocolatey per windows, homebrew per MacOs e tutte le maggiori distribuzioni Linux.

Una volta installato, una delle prime operazioni è certamente l'impostazione dell'utente e l'abilitazione di alcune estensioni che torneranno utili. Per accedere alla configurazione il comando è:


hg config -e

che apre un editor di testo sulla configurazione dello strumento. E' obbligatorio indicare una mail che verrà apposta come autore di ogni commit creato localmente. Una configurazione consigliata è la seguente:


[ui]
username = <vostra email @studenti.unipd.it>

[extensions]
churn = 
histedit = 
mq = 
rebase = 
strip =

Le voci sotto al titolo extensions abilitano alcune estensioni solitamente incluse nella distribuzione di default. In particolare potremmo aver bisogno delle estensioni strip e rebase per correggere un errore nella consegna dei sorgenti.


Gestione delle modifiche

Il comando hg status elenca quali file, nel repository in cui ci si trova, sono stati modificati o non sono inclusi nel sorgente.


PS \app2020-pub> hg status
M slides\lesson10.html
A slides\history10.html
? slides\imgs\hist\alk.jpg
? slides\imgs\hist\alk2.jpg

Un file prefissato da "M" se è stato modificato, da "A" se è stato aggiunto (dal prossimo commit sarà cioè considerato parte del repository), con "R" se è stato rimosso e con "?" se non appartiene al repository.

In Mercurial non esiste il concetto di "modifiche predisposte" ("staged") che esiste in git. Le modifiche considerate per l'aggiunta al repository sono sempre quelle presenti nella directory di lavoro. Un commit si aggiunge con l'omonimo comando, specificando un messaggio con l'opzione -m:

hg commit -m "Lezione 10"

Con il comando log si ottiene un elenco dei commit presenti:

PS \app2020-pub> hg log
changeset:   11:c38f1d6eed83
user:        michele.mauro@unipd.it
date:        Thu Oct 29 18:47:10 2020 +0100
summary:     Lezione 10

changeset:   10:2cd9612d345c
user:        michele.mauro@unipd.it
date:        Wed Oct 28 09:47:29 2020 +0100
summary:     Lezione 09
Checkout


Il comando checkout permette di spostarsi in un punto qualsiasi del log. Il comando accetta l'hash oppure l'ordinale del commit, oppure il nome di un branch per spostarsi sulla relativa testa.

> hg checkout 5
3 files updated, 0 files merged, 131 files removed, 0 files unresolved

> hg summary
genitore: 5:ff4b6828eccf
 Lezione 7
branch: default
commit: 2 sconosciuti (pulito)
update: 4 nuovi changeset (update)

> hg checkout 9
134 files updated, 0 files merged, 0 files removed, 0 files unresolved
> hg summary
genitore: 9:2d92eca417cf tip
 Lezione 11
branch: default
commit: 2 sconosciuti (pulito)
update: (aggiornato)


Branch

In Mercurial il branch è un metadato del commit: un commit quindi viene creato in un branch e vi resta per sempre. Questo rende molto più prevedibili, sicure e semplici da effettuare tutte le operazioni relative alla manutenzione dei branch.

Il ramo principale è denominato "default". Un ramo può partire da default o da un altro ramo, e può essere "chiuso", cioè marcato come non più utilizzabile. Un ramo chiuso non viene elencato dai comandi normali, e non è possibile aggiungervi altre modifiche.

Il comando hg branch indica il ramo corrente.

PS \app2020-pub> hg branch
default
Aggiungendo un nome (che non può essere un numero) il ramo viene denominato a partire dal commit corrente; se si crea un nuovo commit ora, questo darà vita al nuovo ramo.

Per spostarsi da un ramo all'altro si usa il comando update:

hg update <nome branch>

Il comando fallisce se nella directory vi sono delle modifiche non salvate. E' possibile mettere "da parte" delle modifiche (in pratica fare un commit senza aggiungerlo al repository) per richiamarle in seguito; si usa il comando shelve:

PS \app2020-pub> hg shelve -m "lavori in corso"
shelved as default
1 files updated, 0 files merged, 1 files removed, 0 files unresolved
PS \app2020-pub> hg shelve -l
default         (6s ago)    lavori in corso
In questo modo si può mettere da parte delle cose su cui si sta lavorando, passare ad un altro branch e poi tornare dove ci si trovava e riusare le modifiche salvate in precedenza.

Un ramo può avere diverse "teste", cioè diversi sotto-rami divergenti appartenenti però allo stesso ramo. E' una situazione anomala, ma perfettamente gestibile: lo strumento invita più volte a normalizzare la situazione riunendo con un merge i diversi rami, in modo che un ramo abbia per quanto possibile sempre una sola testa.


Bundle

Una delle feature più interessanti di Mercurial è la possibilità di esportare un sottoinsieme delle modifiche in un pacchetto, detto bundle, che può essere con facilità e sicurezza condiviso con altri utenti che stanno lavorando su altre copie dello stesso repository. Quando la collaborazione è fra poche persone, è un sistema che permette di non avere necessità di un servizio centralizzato per condividere il lavoro.

Il comando bundle produce un pacchetto di modifiche in file. Fra le varie opzioni disponibili per indicare quali modifiche includere, -b indica di includere tutte le modifiche di un certo ramo. L'ultimo parametro indica il nome del file da creare:

hg bundle -b matricola matricola.hg
Il comando unbundle include in un repository le modifiche contenute in un pacchetto:

PS \app2020-pub> hg unbundle matricola.hg
sto aggiungendo i changeset
sto aggiungendo i manifesti
sto aggiungendo le modifiche ai file
aggiunti 1 changeset con 1 modifiche a 1 file (+1 head)
new changesets ab30e3e75b9e (1 drafts)
(run 'hg heads' to see heads)
Le modifiche vengono accettate solo se viene verificata la loro corretta relazione con il repository corrente: se si appoggiano ad un commit che è stato rimosso o che non si è ancora importato, o se riferiscono ad un diverso repository, l'importazione fallisce. Un bundle è assolutamente sicuro: non può modificare commit esistenti e non può lasciare il repository in uno stato non valido.


Modifiche alla storia

Mercurial ha un approccio molto conservativo nei confronti della storia: i commit sono immutabili, e cancellarli richiede comandi specifici e normalmente non attivi. I comandi (anch'essi normalmente non attivi) per spostare i commit lungo la storia del repository in realtà creano dei commit nuovi. Questo approccio rende la collaborazione molto sicura: i comandi distruttivi creano sempre un backup locale, e anche condividere una storia modificata ha, al massimo, l'effetto di aggiungere, ad un repository che collabora con noi, la nuova storia accanto alla preesistente. Se si collabora con qualcuno, perciò, ogni comando di modifica della storia deve essere applicato su ogni copia del repository principale.

In Mercurial, i commit si possono identificare con un numero di revisione (una sequenza crescente valida solo localmente, in quanto dipende dall'ordine in cui i commit sono aggiunti al repository) e da un hash calcolato a partire dal loro contenuto. Identificando così un commit, con l'estensione strip è possibile rimuovere un commit e tutti i suoi discendenti dal repository:

PS \app2020-pub> hg log
changeset:   12:ab30e3e75b9e
branch:      Matricola
tag:         tip
parent:      8:0a94ff0a0c4b
user:        Studente <studente@studenti.unipd.it>
date:        Thu Oct 22 19:59:59 2020 +0200
summary:     Versioni usate

changeset:   11:c38f1d6eed83
user:        michele.mauro@unipd.it
date:        Thu Oct 29 18:47:10 2020 +0100
summary:     Lezione 10

changeset:   10:2cd9612d345c
user:        michele.mauro@unipd.it
date:        Wed Oct 28 09:47:29 2020 +0100
summary:     Lezione 09

PS \app2020-pub> hg strip 12
salvato bundle di backup in C:\Users\Michele.Mauro\git\app2020-pub\.hg\strip-backup/ab30e3e75b9e-fd806a18-backup.hg
PS \app2020-pub> hg log
changeset:   11:c38f1d6eed83
tag:         tip
user:        michele.mauro@unipd.it
date:        Thu Oct 29 18:47:10 2020 +0100
summary:     Lezione 10

changeset:   10:2cd9612d345c
user:        michele.mauro@unipd.it
date:        Wed Oct 28 09:47:29 2020 +0100
summary:     Lezione 09

Il commit non è più presente nel repository, ma può essere recuperato dal backup indicato.

Analogamente, un commit può essere spostato da dove si trova con l'estensione rebase:

PS C:\Users\Michele.Mauro\git\app2020-pub> hg log
changeset:   12:ab30e3e75b9e
branch:      Matricola
tag:         tip
parent:      8:0a94ff0a0c4b
user:        Studente <studente@studenti.unipd.it>
date:        Thu Oct 22 19:59:59 2020 +0200
summary:     Versioni usate

changeset:   11:c38f1d6eed83
user:        michele.mauro@unipd.it
date:        Thu Oct 29 18:47:10 2020 +0100
summary:     Lezione 10

changeset:   10:2cd9612d345c
user:        michele.mauro@unipd.it
date:        Wed Oct 28 09:47:29 2020 +0100
summary:     Lezione 09
Notiamo che il commit 12 ha iniziato il branch a partire dal commit 8. Vogliamo spostarlo in modo che cominci dal commit 11 (attuale testa di default):

PS \app2020-pub> hg rebase -s 12 -d 11 --keepbranches
rebasing 12:ab30e3e75b9e "Versioni usate" (tip)
salvato bundle di backup in C:\Users\Michele.Mauro\git\app2020-pub\.hg\strip-backup/ab30e3e75b9e-fd806a18-rebase.hg
PS \app2020-pub> hg log
changeset:   12:1117668a72a3
branch:      1121217M
tag:         tip
user:        Studente <studente@studenti.unipd.it>
date:        Thu Oct 22 16:44:36 2020 +0200
summary:     Versioni usate

changeset:   11:c38f1d6eed83
user:        michele.mauro@unipd.it
date:        Thu Oct 29 18:47:10 2020 +0100
summary:     Lezione 10
Si può notare come sia stato creato un backup dei precedenti commit, e come l'hash del commit sia cambiato. L'opzione --keepbranches ha permesso di conservare le informazioni di branch: in questo modo, a tutti gli effetti il branch è stato spostato in modo che la sua origine è ora la testa di default. Senza tale opzione, i commit spostati diventano parte del branch cui appartiene la destinazione.

Se durante lo spostamento il sistema nota dei conflitti, questi vanno risolti come dei normali conflitti di merge.